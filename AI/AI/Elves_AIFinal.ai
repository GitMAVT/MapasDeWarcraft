//===========================================================================
// 
// Silver Covenant
// 
//   Warcraft III AI script
//   Generated by the Warcraft III World Editor
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    integer                 attackWave                 = 1
    integer                 nextDelay                  = 0
    integer                 awGold                     = 0
    integer                 awWood                     = 0

    // Conditions
    boolean                 gCond_ScoutTowers          = false
    boolean                 gCond_NeedExpansion        = false
    boolean                 gCond_NeedExpansion_2      = false
    boolean                 gCond_NeedExpansion_3      = false
    boolean                 gCond_Attack_Enemy         = false
    boolean                 gCond_Attack_Enemy_Major   = false
    boolean                 gCond_Workers1             = false
    boolean                 gCond_Workers2             = false
    boolean                 gCond_AtacarAEnemigo       = false
    boolean                 gCond_Farmeo_avanzado      = false
    boolean                 gCond_Farmeo_Mediano       = false
    boolean                 gCond_NeedExpansionRequiere = false
    boolean                 gCond_RushCommand          = false
endglobals

//***************************************************************************
//*
//*  Utility Functions
//*
//***************************************************************************

//===========================================================================
function CheckLastCommand takes boolean pop returns integer
    local integer cmd = GetLastCommand()
    if (pop) then
        call PopLastCommand(  )
    endif
    return cmd
endfunction

//===========================================================================
function CheckLastCommandData takes boolean pop returns integer
    local integer data = GetLastData()
    if (pop) then
        call PopLastCommand(  )
    endif
    return data
endfunction

//===========================================================================
function TotalFoodProduced takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_CAP)
endfunction

//===========================================================================
function ExpansionNeeded takes nothing returns boolean
    return take_exp
endfunction

//===========================================================================
function BuildExpansion takes integer hallID, integer mineID returns nothing
    if (HallsCompleted(hallID)) then
        call SetBuildExpa( TownCount(hallID) + 1, mineID )
    endif
endfunction

//===========================================================================
function CurrentAttackWave takes nothing returns integer
    return attackWave
endfunction

//===========================================================================
function ResetAttackUnits takes nothing returns nothing
    set awGold = 0
    set awWood = 0
    call InitAssaultGroup(  )
endfunction

//===========================================================================
function AddAttackUnit takes integer minQty, integer maxQty, integer unitID returns nothing
    // Track attacking gold workers
    if (unitID == 'nbee') then
        set awGold = awGold + minQty
    endif

    // Track attacking wood workers
    if (unitID == 'nbee') then
        set awWood = awWood + minQty
    endif

    call SetAssaultGroup( minQty, maxQty, unitID )
endfunction

//***************************************************************************
//*
//*  Basic Options
//*
//***************************************************************************

//===========================================================================
function InitOptions takes nothing returns nothing
    call SetCampaignAI(  )
    call SetDefendPlayer( false )
    call SetRandomPaths( false )
    call SetTargetHeroes( true )
    call SetPeonsRepair( true )
    call SetHeroesFlee( true )
    call SetHeroesBuyItems( true )
    call SetUnitsFlee( true )
    call SetGroupsFlee( false )
    call SetWatchMegaTargets( true )
    call SetIgnoreInjured( true )
    call SetHeroesTakeItems( true )
    call SetSlowChopping( false )
    call SetCaptainChanges( true )
    call SetSmartArtillery( true )
endfunction

//***************************************************************************
//*
//*  Conditions
//*
//***************************************************************************

//===========================================================================
// Updates the values of all preset conditions
//===========================================================================
function UpdateConditions takes nothing returns nothing
    set gCond_ScoutTowers = ( ( ( GetUnitCount( 'negt' ) + GetUnitCount( 'negf' ) ) + GetUnitCount( 'negm' ) ) < 10 )
    set gCond_NeedExpansion = ( GetMinesOwned(  ) < 2 )
    set gCond_NeedExpansion_2 = ( GetMinesOwned(  ) < 3 )
    set gCond_NeedExpansion_3 = ( GetMinesOwned(  ) < 4 )
    set gCond_Attack_Enemy = ( ( TownThreatened(  ) == false ) and ( FoodUsed(  ) >= 50 ) )
    set gCond_Attack_Enemy_Major = ( ( TownThreatened(  ) == false ) and ( FoodUsed(  ) >= 100 ) )
    set gCond_Workers1 = ( ( GetUnitCount( 'nbee' ) < 20 ) and ( ( TownHasMine( TownWithMine(  ) ) == true ) and ( TownHasHall( TownWithMine(  ) ) == true ) ) )
    set gCond_Workers2 = ( ( GetUnitCount( 'nbee' ) < 20 ) and ( ( TownHasMine( ( TownWithMine(  ) + 1 ) ) == true ) and ( TownHasHall( ( TownWithMine(  ) + 1 ) ) == true ) ) )
    set gCond_AtacarAEnemigo = ( FoodUsed(  ) > 120 )
    set gCond_Farmeo_avanzado = ( FoodUsed(  ) > 90 )
    set gCond_Farmeo_Mediano = ( FoodUsed(  ) > 60 )
    set gCond_NeedExpansionRequiere = ( ( FoodUsed(  ) > 50 ) and ( ExpansionNeeded(  ) == true ) )
    set gCond_RushCommand = ( CheckLastCommand( false ) == 1 )
endfunction

//***************************************************************************
//*
//*  Heroes
//*
//***************************************************************************

//===========================================================================
// Stores hero ID and skills
//===========================================================================
function SetHero takes integer order, integer heroid returns nothing
    if (order == 1) then
        set hero_id = heroid
        if (heroid == 'Hkal') then
            set skills1[ 1] = 'AHfs'
            set skills1[ 2] = 'AHbn'
            set skills1[ 3] = 'AHdr'
            set skills1[ 4] = 'AHfs'
            set skills1[ 5] = 'AHbn'
            set skills1[ 6] = 'AHpx'
            set skills1[ 7] = 'AHdr'
            set skills1[ 8] = 'AHfs'
            set skills1[ 9] = 'AHbn'
            set skills1[10] = 'AHdr'
            set skills1[11] = 'AHfs'
            set skills1[12] = 'AHpx'
            set skills1[13] = 'AHbn'
            set skills1[14] = 'AHdr'
            set skills1[15] = 'AHfs'
            set skills1[16] = 'AHbn'
            set skills1[17] = 'AHdr'
            set skills1[18] = 'AHfs'
            set skills1[19] = 'AHbn'
            set skills1[20] = 'AHdr'
        elseif (heroid == 'Hvwd') then
            set skills1[ 1] = 'AEst'
            set skills1[ 2] = 'AHca'
            set skills1[ 3] = 'AEar'
            set skills1[ 4] = 'AEst'
            set skills1[ 5] = 'AHca'
            set skills1[ 6] = 'AEsf'
            set skills1[ 7] = 'AEar'
            set skills1[ 8] = 'AEst'
            set skills1[ 9] = 'AHca'
            set skills1[10] = 'AEar'
            set skills1[11] = 'AEst'
            set skills1[12] = 'AEsf'
            set skills1[13] = 'AHca'
            set skills1[14] = 'AEar'
            set skills1[15] = 'AEst'
            set skills1[16] = 'AHca'
            set skills1[17] = 'AEar'
            set skills1[18] = 'AEst'
            set skills1[19] = 'AHca'
            set skills1[20] = 'AEar'
        elseif (heroid == 'Hlgr') then
            set skills1[ 1] = 'AHhb'
            set skills1[ 2] = 'AEbl'
            set skills1[ 3] = 'A088'
            set skills1[ 4] = 'AHhb'
            set skills1[ 5] = 'AEbl'
            set skills1[ 6] = 'AOww'
            set skills1[ 7] = 'A088'
            set skills1[ 8] = 'AHhb'
            set skills1[ 9] = 'AEbl'
            set skills1[10] = 'A088'
            set skills1[11] = 'AHhb'
            set skills1[12] = 'AOww'
            set skills1[13] = 'AEbl'
            set skills1[14] = 'A088'
            set skills1[15] = 'AHhb'
            set skills1[16] = 'AEbl'
            set skills1[17] = 'A088'
            set skills1[18] = 'AHhb'
            set skills1[19] = 'AEbl'
            set skills1[20] = 'A088'
        endif
    elseif (order == 2) then
        set hero_id2 = heroid
        if (heroid == 'Hkal') then
            set skills2[ 1] = 'AHfs'
            set skills2[ 2] = 'AHbn'
            set skills2[ 3] = 'AHdr'
            set skills2[ 4] = 'AHfs'
            set skills2[ 5] = 'AHbn'
            set skills2[ 6] = 'AHpx'
            set skills2[ 7] = 'AHdr'
            set skills2[ 8] = 'AHfs'
            set skills2[ 9] = 'AHbn'
            set skills2[10] = 'AHdr'
            set skills2[11] = 'AHfs'
            set skills2[12] = 'AHpx'
            set skills2[13] = 'AHbn'
            set skills2[14] = 'AHdr'
            set skills2[15] = 'AHfs'
            set skills2[16] = 'AHbn'
            set skills2[17] = 'AHdr'
            set skills2[18] = 'AHfs'
            set skills2[19] = 'AHbn'
            set skills2[20] = 'AHdr'
        elseif (heroid == 'Hvwd') then
            set skills2[ 1] = 'AEst'
            set skills2[ 2] = 'AHca'
            set skills2[ 3] = 'AEar'
            set skills2[ 4] = 'AEst'
            set skills2[ 5] = 'AHca'
            set skills2[ 6] = 'AEsf'
            set skills2[ 7] = 'AEar'
            set skills2[ 8] = 'AEst'
            set skills2[ 9] = 'AHca'
            set skills2[10] = 'AEar'
            set skills2[11] = 'AEst'
            set skills2[12] = 'AEsf'
            set skills2[13] = 'AHca'
            set skills2[14] = 'AEar'
            set skills2[15] = 'AEst'
            set skills2[16] = 'AHca'
            set skills2[17] = 'AEar'
            set skills2[18] = 'AEst'
            set skills2[19] = 'AHca'
            set skills2[20] = 'AEar'
        elseif (heroid == 'Hlgr') then
            set skills2[ 1] = 'AHhb'
            set skills2[ 2] = 'AEbl'
            set skills2[ 3] = 'A088'
            set skills2[ 4] = 'AHhb'
            set skills2[ 5] = 'AEbl'
            set skills2[ 6] = 'AOww'
            set skills2[ 7] = 'A088'
            set skills2[ 8] = 'AHhb'
            set skills2[ 9] = 'AEbl'
            set skills2[10] = 'A088'
            set skills2[11] = 'AHhb'
            set skills2[12] = 'AOww'
            set skills2[13] = 'AEbl'
            set skills2[14] = 'A088'
            set skills2[15] = 'AHhb'
            set skills2[16] = 'AEbl'
            set skills2[17] = 'A088'
            set skills2[18] = 'AHhb'
            set skills2[19] = 'AEbl'
            set skills2[20] = 'A088'
        endif
    elseif (order == 3) then
        set hero_id3 = heroid
        if (heroid == 'Hkal') then
            set skills3[ 1] = 'AHfs'
            set skills3[ 2] = 'AHbn'
            set skills3[ 3] = 'AHdr'
            set skills3[ 4] = 'AHfs'
            set skills3[ 5] = 'AHbn'
            set skills3[ 6] = 'AHpx'
            set skills3[ 7] = 'AHdr'
            set skills3[ 8] = 'AHfs'
            set skills3[ 9] = 'AHbn'
            set skills3[10] = 'AHdr'
            set skills3[11] = 'AHfs'
            set skills3[12] = 'AHpx'
            set skills3[13] = 'AHbn'
            set skills3[14] = 'AHdr'
            set skills3[15] = 'AHfs'
            set skills3[16] = 'AHbn'
            set skills3[17] = 'AHdr'
            set skills3[18] = 'AHfs'
            set skills3[19] = 'AHbn'
            set skills3[20] = 'AHdr'
        elseif (heroid == 'Hvwd') then
            set skills3[ 1] = 'AEst'
            set skills3[ 2] = 'AHca'
            set skills3[ 3] = 'AEar'
            set skills3[ 4] = 'AEst'
            set skills3[ 5] = 'AHca'
            set skills3[ 6] = 'AEsf'
            set skills3[ 7] = 'AEar'
            set skills3[ 8] = 'AEst'
            set skills3[ 9] = 'AHca'
            set skills3[10] = 'AEar'
            set skills3[11] = 'AEst'
            set skills3[12] = 'AEsf'
            set skills3[13] = 'AHca'
            set skills3[14] = 'AEar'
            set skills3[15] = 'AEst'
            set skills3[16] = 'AHca'
            set skills3[17] = 'AEar'
            set skills3[18] = 'AEst'
            set skills3[19] = 'AHca'
            set skills3[20] = 'AEar'
        elseif (heroid == 'Hlgr') then
            set skills3[ 1] = 'AHhb'
            set skills3[ 2] = 'AEbl'
            set skills3[ 3] = 'A088'
            set skills3[ 4] = 'AHhb'
            set skills3[ 5] = 'AEbl'
            set skills3[ 6] = 'AOww'
            set skills3[ 7] = 'A088'
            set skills3[ 8] = 'AHhb'
            set skills3[ 9] = 'AEbl'
            set skills3[10] = 'A088'
            set skills3[11] = 'AHhb'
            set skills3[12] = 'AOww'
            set skills3[13] = 'AEbl'
            set skills3[14] = 'A088'
            set skills3[15] = 'AHhb'
            set skills3[16] = 'AEbl'
            set skills3[17] = 'A088'
            set skills3[18] = 'AHhb'
            set skills3[19] = 'AEbl'
            set skills3[20] = 'A088'
        endif
    endif
endfunction

//===========================================================================
// Selects hero IDs for three possible heroes
//===========================================================================
function SelectHeroes takes nothing returns nothing
    local integer roll = GetRandomInt(1,100)
    if (roll <= 17) then
        call SetHero( 1, 'Hkal' )
        call SetHero( 2, 'Hvwd' )
        call SetHero( 3, 'Hlgr' )
    elseif (roll <= 33) then
        call SetHero( 1, 'Hkal' )
        call SetHero( 2, 'Hlgr' )
        call SetHero( 3, 'Hvwd' )
    elseif (roll <= 50) then
        call SetHero( 1, 'Hvwd' )
        call SetHero( 2, 'Hkal' )
        call SetHero( 3, 'Hlgr' )
    elseif (roll <= 67) then
        call SetHero( 1, 'Hvwd' )
        call SetHero( 2, 'Hlgr' )
        call SetHero( 3, 'Hkal' )
    elseif (roll <= 84) then
        call SetHero( 1, 'Hlgr' )
        call SetHero( 2, 'Hkal' )
        call SetHero( 3, 'Hvwd' )
    else
        call SetHero( 1, 'Hlgr' )
        call SetHero( 2, 'Hvwd' )
        call SetHero( 3, 'Hkal' )
    endif
endfunction

//===========================================================================
// Returns the hero skill for the given hero and level
//===========================================================================
function ChooseHeroSkill takes nothing returns integer
    local integer curHero = GetHeroId()
    local integer level = GetHeroLevelAI()

    if (level > max_hero_level) then
        set max_hero_level = level
    endif

    if (curHero == hero_id) then
        return skills1[level]
    elseif (curHero == hero_id2) then
        return skills2[level]
    elseif (curHero == hero_id3) then
        return skills3[level]
    endif
    return 0
endfunction

//***************************************************************************
//*
//*  Building and Harvesting
//*
//***************************************************************************

//===========================================================================
// Specifies building priorities for workers
//===========================================================================
function BuildPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    if (( ( GetUnitCountDone( 'ngwr' ) + ( GetUnitCount( 'nef0' ) + GetUnitCount( 'nef1' ) ) ) == 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'ngwr', 0 )
    endif
    if (gCond_Workers1) then
        call SetBuildAll( BUILD_UNIT, 1, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 4, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 5, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 6, 'nbee', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'nfrt', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'nheb', 0 )
    if (gCond_Workers1) then
        call SetBuildAll( BUILD_UNIT, 7, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 8, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 9, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 10, 'nbee', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'nefm', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'nef4', 0 )
    call SetBuildAll( BUILD_UNIT, 1, hero_id, -1 )
    if (( GetUnitCountDone( 'nef1' ) == 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'hhes', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'hhes', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'hhes', -1 )
        call SetBuildAll( BUILD_UNIT, 4, 'hhes', -1 )
        call SetBuildAll( BUILD_UNIT, 5, 'hhes', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 2, 'nefm', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'nef3', 0 )
    if (gCond_Workers1) then
        call SetBuildAll( BUILD_UNIT, 11, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 12, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 13, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 14, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 15, 'nbee', -1 )
    endif
    if (gCond_ScoutTowers) then
        call SetBuildAll( BUILD_UNIT, 1, 'ndgt', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'nef2', 0 )
    if (( GetUnitCountDone( 'nef7' ) == 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'nhea', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'nhea', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'nhea', -1 )
        call SetBuildAll( BUILD_UNIT, 4, 'nhea', -1 )
        call SetBuildAll( BUILD_UNIT, 5, 'nhea', -1 )
        call SetBuildAll( BUILD_UNIT, 6, 'nhea', -1 )
    endif
    if (( GetUnitCountDone( 'nef0' ) >= 1 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'R02P', -1 )
    endif
    if (( GetUnitCountDone( 'nef1' ) >= 1 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'R02P', -1 )
        call SetBuildAll( BUILD_UPGRADE, 1, 'R02Q', -1 )
        call SetBuildAll( BUILD_UPGRADE, 2, 'R02Q', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'negt', -1 )
    if (( GetUpgradeLevel( 'Rhpm' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhpm', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhde' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhde', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 2, 'negt', -1 )
    if (( GetUpgradeLevel( 'Rhme' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhme', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhar' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhar', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhla' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhla', -1 )
    endif
    if (( GetUpgradeLevel( 'Resm' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Resm', -1 )
    endif
    if (gCond_NeedExpansion) then
        call BuildExpansion( 'ngwr', 'ngwr' )
    endif
    if (gCond_Workers2) then
        call SetBuildAll( BUILD_UNIT, 16, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 17, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 18, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 19, 'nbee', -1 )
        call SetBuildAll( BUILD_UNIT, 20, 'nbee', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 2, 'nheb', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'negf', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'nefm', 0 )
    call SetBuildAll( BUILD_UNIT, 2, 'negf', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'nefm', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'negm', -1 )
    if (( GetUpgradeLevel( 'Rhme' ) < 2 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rhme', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhar' ) < 2 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rhar', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhla' ) < 2 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rhla', -1 )
    endif
    if (( GetUpgradeLevel( 'Resm' ) < 2 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Resm', -1 )
    endif
    if (( ( GetUnitCountDone( 'nef1' ) + GetUnitCountDone( 'nef0' ) ) == 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'nef0', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, hero_id2, -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'nef6', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'nef5', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'nef7', 0 )
    call SetBuildAll( BUILD_UNIT, 5, 'nefm', 0 )
    call SetBuildAll( BUILD_UNIT, 1, 'nmed', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nmed', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'nmed', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'nmed', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhpt', -1 )
    if (( GetUnitCountDone( 'nef1' ) >= 1 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rhpt', -1 )
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rhpt', -1 )
        call SetBuildAll( BUILD_UPGRADE, 4, 'Rhpt', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'nchp', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nchp', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'nchp', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'nchp', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhst', -1 )
    if (( GetUnitCountDone( 'nef1' ) >= 1 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rhst', -1 )
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rhst', -1 )
        call SetBuildAll( BUILD_UPGRADE, 4, 'Rhst', -1 )
    endif
    if (gCond_NeedExpansion_2) then
        call BuildExpansion( 'ngwr', 'ngwr' )
    endif
    call SetBuildAll( BUILD_UNIT, 6, 'nefm', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'negm', -1 )
    if (( GetUpgradeLevel( 'Rhme' ) < 3 )) then
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rhme', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhar' ) < 3 )) then
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rhar', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhla' ) < 3 )) then
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rhla', -1 )
    endif
    if (( GetUpgradeLevel( 'Resm' ) < 3 )) then
        call SetBuildAll( BUILD_UPGRADE, 3, 'Resm', -1 )
    endif
    call SetBuildAll( BUILD_UPGRADE, 1, 'R02W', -1 )
    if (( GetUnitCountDone( 'nef1' ) >= 1 )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'R02W', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 3, 'negt', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'negt', -1 )
    if (( GetUpgradeLevel( 'Rhse' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhse', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'nhym', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nhym', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'nhym', -1 )
    if (( GetUpgradeLevel( 'Rhss' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhss', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 3, 'negf', -1 )
    if (( GetUpgradeLevel( 'Rhme' ) < 4 )) then
        call SetBuildAll( BUILD_UPGRADE, 4, 'Rhme', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhar' ) < 4 )) then
        call SetBuildAll( BUILD_UPGRADE, 4, 'Rhar', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhla' ) < 4 )) then
        call SetBuildAll( BUILD_UPGRADE, 4, 'Rhla', -1 )
    endif
    if (( GetUpgradeLevel( 'Resm' ) < 4 )) then
        call SetBuildAll( BUILD_UPGRADE, 4, 'Resm', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 4, 'negf', -1 )
    call SetBuildAll( BUILD_UNIT, 7, 'nefm', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hrdh', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hrdh', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hrdh', -1 )
    if (( GetUpgradeLevel( 'R02U' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'R02U', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'njks', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'njks', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'njks', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'njks', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'njks', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'njks', -1 )
    if (( GetUnitCountDone( 'nef1' ) == 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'nef1', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 2, 'nef6', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nef7', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nef5', -1 )
    call SetBuildAll( BUILD_UNIT, 1, hero_id3, -1 )
    call SetBuildAll( BUILD_UNIT, 8, 'nefm', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nef2', -1 )
    if (gCond_NeedExpansion_3) then
        call BuildExpansion( 'ngwr', 'ngwr' )
    endif
    call SetBuildAll( BUILD_UNIT, 9, 'nefm', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nef3', -1 )
    if (( GetUpgradeLevel( 'Rhme' ) < 5 )) then
        call SetBuildAll( BUILD_UPGRADE, 5, 'Rhme', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhar' ) < 5 )) then
        call SetBuildAll( BUILD_UPGRADE, 5, 'Rhar', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhla' ) < 5 )) then
        call SetBuildAll( BUILD_UPGRADE, 5, 'Rhla', -1 )
    endif
    if (( GetUpgradeLevel( 'Resm' ) < 5 )) then
        call SetBuildAll( BUILD_UPGRADE, 5, 'Resm', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'hhdl', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hhdl', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hhdl', -1 )
    if (( GetUpgradeLevel( 'R02S' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'R02S', -1 )
    endif
    if (( GetUpgradeLevel( 'R02T' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'R02T', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'hdhw', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hdhw', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hdhw', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'hdhw', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'hdhw', -1 )
    if (( GetUpgradeLevel( 'Rhcd' ) == 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rhcd', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'nbel', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'nbel', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'nbel', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'nbel', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'nbel', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'nbel', -1 )
    if (( GetUpgradeLevel( 'R02R' ) < 2 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'R02R', -1 )
        call SetBuildAll( BUILD_UPGRADE, 2, 'R02R', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhme' ) < 6 )) then
        call SetBuildAll( BUILD_UPGRADE, 6, 'Rhme', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhar' ) < 6 )) then
        call SetBuildAll( BUILD_UPGRADE, 6, 'Rhar', -1 )
    endif
    if (( GetUpgradeLevel( 'Rhla' ) < 6 )) then
        call SetBuildAll( BUILD_UPGRADE, 6, 'Rhla', -1 )
    endif
    if (( GetUpgradeLevel( 'Resm' ) < 6 )) then
        call SetBuildAll( BUILD_UPGRADE, 6, 'Resm', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'hbew', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hbew', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hbew', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'negm', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'negf', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'negt', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'negf', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'negt', -1 )
endfunction

//===========================================================================
// Specifies harvesting priorities for workers
//===========================================================================
function HarvestPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    local integer allGold = GetUnitCountDone('nbee')
    local integer allWood = GetUnitCountDone('nbee')
    local integer numWorkers
    set numWorkers = 5
    call HarvestGold( mine + 0, numWorkers )
    set numWorkers = 5
    call HarvestGold( mine + 1, numWorkers )
    set numWorkers = 20
    call HarvestWood( mine, numWorkers )
endfunction

//===========================================================================
// Determines all building and harvesting assignments for workers
//===========================================================================
function WorkerAssignment takes nothing returns nothing
    loop
        call UpdateConditions(  )

        // Harvesting
        call ClearHarvestAI(  )
        call HarvestPriorities(  )

        // Building
        call InitBuildArray(  )
        call BuildPriorities(  )

        call Sleep( 2 )
    endloop
endfunction

//***************************************************************************
//*
//*  Attacking
//*
//***************************************************************************

//===========================================================================
// Returns true if the minimum forces for an attack exist
//===========================================================================
function HaveMinimumAttackers takes nothing returns boolean
    local integer count

    // Check for attack wave limit
    if (attackWave > 1) then
        return false
    endif

    // Attack Group: Minium
    set count = GetUnitCountDone( 'hhes' )
    if (count < 3) then
        return false
    endif
    return true
endfunction

//===========================================================================
// Assigns units to attack based on the given attack group
//===========================================================================
function PrepareAttackGroup takes integer groupID returns nothing
    local integer all

    // Attack Group #1: All Units
    if (groupID == 1) then
        if (( GetUnitCount( 'hdhw' ) > 0 )) then
            set all = GetUnitCountDone( 'hdhw' )
            call AddAttackUnit( all, all, 'hdhw' )
        endif
        if (( GetUnitCount( 'nhea' ) > 0 )) then
            set all = GetUnitCountDone( 'nhea' )
            call AddAttackUnit( all, all, 'nhea' )
        endif
        if (( GetUnitCount( 'hhes' ) > 0 )) then
            set all = GetUnitCountDone( 'hhes' )
            call AddAttackUnit( all, all, 'hhes' )
        endif
        if (( GetUnitCount( 'nmed' ) > 0 )) then
            set all = GetUnitCountDone( 'nmed' )
            call AddAttackUnit( all, all, 'nmed' )
        endif
        if (( GetUnitCount( 'nchp' ) > 0 )) then
            set all = GetUnitCountDone( 'nchp' )
            call AddAttackUnit( all, all, 'nchp' )
        endif
        if (( GetUnitCount( 'nhym' ) > 0 )) then
            set all = GetUnitCountDone( 'nhym' )
            call AddAttackUnit( all, all, 'nhym' )
        endif
        if (( GetUnitCount( 'hrdh' ) > 0 )) then
            set all = GetUnitCountDone( 'hrdh' )
            call AddAttackUnit( all, all, 'hrdh' )
        endif
        if (( GetUnitCount( 'hbew' ) > 0 )) then
            set all = GetUnitCountDone( 'hbew' )
            call AddAttackUnit( all, all, 'hbew' )
        endif
        if (( GetUnitCount( 'njks' ) > 0 )) then
            set all = GetUnitCountDone( 'njks' )
            call AddAttackUnit( all, all, 'njks' )
        endif
        if (( GetUnitCount( 'nbel' ) > 0 )) then
            set all = GetUnitCountDone( 'nbel' )
            call AddAttackUnit( all, all, 'nbel' )
        endif
        if (( GetUnitCount( 'hhdl' ) > 0 )) then
            set all = GetUnitCountDone( 'hhdl' )
            call AddAttackUnit( all, all, 'hhdl' )
        endif
        if (( GetUnitCount( 'Hkal' ) > 0 )) then
            call AddAttackUnit( 1,   1,   'Hkal' )
        endif
        if (( GetUnitCount( 'Hvwd' ) > 0 )) then
            call AddAttackUnit( 1,   1,   'Hvwd' )
        endif
        if (( GetUnitCount( 'Eill' ) > 0 )) then
            call AddAttackUnit( 1,   1,   'Eill' )
        endif
        if (( GetUnitCount( 'Hlgr' ) > 0 )) then
            call AddAttackUnit( 1,   1,   'Hlgr' )
        endif

        // Attack Group #2: Minium
    elseif (groupID == 2) then
        call AddAttackUnit( 3,   3,   'hhes' )
        set all = GetUnitCountDone( hero_id )
        call AddAttackUnit( all, all, hero_id )

    endif
endfunction

//===========================================================================
// Prepares an attack group based on the current attack wave
//===========================================================================
function PrepareForces takes nothing returns nothing
    if (attackWave == 1) then
        call PrepareAttackGroup( 1 )
    endif
endfunction

//===========================================================================
// Sleep delays for each attack wave
//===========================================================================
function AttackWaveDelay takes integer inWave returns nothing
    if (inWave < nextDelay) then
        return
    endif

    set nextDelay = inWave + 1
endfunction

//===========================================================================
// Advances attack wave counter
//===========================================================================
function AttackWaveUpdate takes nothing returns nothing
    call AttackWaveDelay( attackWave )
    set attackWave = attackWave + 1
    if (attackWave > 1) then
        set attackWave = 1
        set nextDelay = attackWave + 1
    endif
endfunction

//===========================================================================
// Basic attack functionality
//===========================================================================
function AttackTarget takes unit target, boolean addAlliance returns nothing
    if (target == null) then
        return
    endif
    if (addAlliance) then
        call SetAllianceTarget( target )
    endif
    call FormGroup( 3, true )
    call AttackMoveKillA( target )
    if (not addAlliance) then
        call SetAllianceTarget( null )
    endif
endfunction

//===========================================================================
// Initiates an attack based on target priorities
//===========================================================================
function LaunchAttack takes nothing returns nothing
    local unit target = null
    local boolean setAlly = true

    // Don't launch any attack while town is threatened
    if (TownThreatened()) then
        call Sleep( 2 )
        return
    endif

    // Target Priority #1
    if (gCond_RushCommand) then
        if (target == null) then
            set target = GetMegaTarget()
        endif

        // Target Priority #2
    endif
    if (gCond_NeedExpansionRequiere) then
        if (target == null) then
            set target = GetExpansionFoe()
            if (target != null) then
                set take_exp = false
            endif
        endif

        // Target Priority #3
    endif
    if (gCond_AtacarAEnemigo) then
        if (target == null) then
            set target = GetAllianceTarget()
            if (target != null) then
                set setAlly = false
            endif
        endif

        // Target Priority #4
        if (target == null) then
            set target = GetMegaTarget()
        endif

        // Target Priority #5
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #6
        if (target == null) then
            set target = GetEnemyExpansion()
        endif

        // Target Priority #7
    endif
    if (gCond_Farmeo_avanzado) then
        if (target == null) then
            set target = GetCreepCamp( 19, 100, true )
        endif

        // Target Priority #8
    endif
    if (gCond_Farmeo_Mediano) then
        if (target == null) then
            set target = GetCreepCamp( 18, 36, true )
        endif

        // Target Priority #9
    endif
    if (target == null) then
        set target = GetCreepCamp( 0, 17, false )
    endif

    // Attack the target and increment attack wave
    if (target != null) then
        call AttackTarget( target, setAlly )
        call AttackWaveUpdate(  )
    else
        // If no target was found, sleep a bit before trying again
        call Sleep( 20 )
    endif
endfunction

//===========================================================================
// Determines all attacking assignments
//===========================================================================
function AttackAssignment takes nothing returns nothing
    call StaggerSleep( 0, 2 )
    if (attackWave == 1) then
        call AttackWaveDelay( 0 )
    endif
    loop
        loop
            call UpdateConditions(  )
            exitwhen (HaveMinimumAttackers() and not CaptainRetreating())
            call Sleep( 2 )
        endloop
        call RemoveInjuries(  )
        call ResetAttackUnits(  )
        call PrepareForces(  )
        call LaunchAttack(  )
    endloop
endfunction

//***************************************************************************
//*
//*  Main Entry Point
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call InitAI(  )
    call SetPlayerName( ai_player, "Silver Covenant" )
    call InitOptions(  )
    call SelectHeroes(  )
    call CreateCaptains(  )
    call SetHeroLevels( function ChooseHeroSkill )

    call Sleep( 0.1 )
    call StartThread( function WorkerAssignment )
    call StartThread( function AttackAssignment )
    call PlayGame(  )
endfunction

